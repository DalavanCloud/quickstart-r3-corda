AWSTemplateFormatVersion: 2010-09-09
Description: 'Corda Infrastructure - Corda Node, License: Apache 2.0 (Please do not remove) June,2018 (qs-1odje6ci1)'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Network Configuration
        Parameters:
          - VPCID
          - VPCCIDR
          - PublicSubnet1ID
          - PublicSubnet2ID
          - PrivateSubnet1ID
          - PrivateSubnet2ID
          - RemoteAccessCIDR
      - Label:
          default: Corda Configuration
        Parameters:
          - EmailAddress
          - Location
          - CountryCode
          - OneTimeKey
          - KeyPairName
          - CordaAccessCIDR
          - InstanceType
      - Label:
          default: Corda Database Configuration
        Parameters:
          - DBMasterUsername
          - DBMasterUserPassword
          - RDSEndPoint
      - Label:
          default: AWS Quick Start Configuration
        Parameters:
          - QSS3BucketName
          - QSS3KeyPrefix
    ParameterLabels:
      EmailAddress:
        default: Email Address
      Location:
        default: Location
      CountryCode:
        default: Country Code
      OneTimeKey:
        default: One Time Key
      KeyPairName:
        default: Key Pair Name
      PublicSubnet1ID:
        default: Public Subnet 1 ID
      PublicSubnet2ID:
        default: Public Subnet 2 ID
      PrivateSubnet1CIDR:
        default: Private subnet 1 CIDR
      PrivateSubnet2CIDR:
        default: Private subnet 2 CIDR
      PublicSubnet1CIDR:
        default: Public subnet 1 CIDR
      PublicSubnet2CIDR:
        default: Public subnet 2 CIDR
      RDSEndPoint:
        default: RDS Endpoint
      DBMasterUsername:
        default: DB Master Username
      DBMasterUserPassword:
        default: DB Master User Password
      QSS3BucketName:
        default: Quick Start S3 Bucket Name
      QSS3KeyPrefix:
        default: Quick Start S3 Key Prefix
      RemoteAccessCIDR:
        default: Allowed SSH Access CIDR
      CordaAccessCIDR:
        default: Allowed Corda Access CIDR
      VPCID:
        default: VPC ID
      VPCCIDR:
        default: VPC CIDR
Parameters:
  EmailAddress:
    Description: Email address
    Type: String
    AllowedPattern: ([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)
    ConstraintDescription: Must be a valid email address.
  CountryCode:
    Description: Country Code
    Type: String
  Location:
    Description: Location
    Type: String
  RDSEndPoint:
    Description: RDSEndPoint
    Type: String
  DBMasterUserPassword:
    Description: DBMasterUserPassword
    Type: String
  DBMasterUsername:
    Description: DBMasterUsername
    Type: String
  DBName:
    Description: DBName
    Type: String
  OneTimeKey:
    Description: One Time Key
    Type: String
  InstanceType:
    AllowedValues:
       - t2.nano
       - t2.micro
       - t2.small
       - t2.medium
       - t2.large
       - m3.large
       - m3.xlarge
       - m3.2xlarge
       - m4.large
       - m4.xlarge
       - m4.2xlarge
       - m4.4xlarge
    Default: t2.micro
    Description: Amazon EC2 instance type for the bastion instances
    Type: String
  KeyPairName:
    Description: Enter a Public/private key pair. If you do not have one in this region,
      please create it before continuing
    Type: 'AWS::EC2::KeyPair::KeyName'
  PrivateSubnet1ID:
    Description: Private Subnet Id 1
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet2ID:
    Description: Private Subnet Id 2
    Type: AWS::EC2::Subnet::Id
  PublicSubnet1ID:
    Description: Public Subnet Id 1
    Type: AWS::EC2::Subnet::Id
  PublicSubnet2ID:
    Description: Public Subnet Id 2
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet1CIDR:
    ConstraintDescription: Must be a valid IP range in x.x.x.x/x notation
    Default: 10.0.0.0/19
    Description: CIDR block for private subnet 1 located in Availability Zone 1
    Type: String
  PrivateSubnet2CIDR:
    ConstraintDescription: Must be a valid IP range in x.x.x.x/x notation
    Default: 10.0.32.0/19
    Description: CIDR block for private subnet 2 located in Availability Zone 2
    Type: String
  PublicSubnet1CIDR:
    ConstraintDescription: Must be a valid IP range in x.x.x.x/x notation
    Default: 10.0.128.0/20
    Description: CIDR Block for the public DMZ subnet 1 located in Availability Zone 1
    Type: String
  PublicSubnet2CIDR:
    ConstraintDescription: Must be a valid IP range in x.x.x.x/x notation
    Default: 10.0.144.0/20
    Description: CIDR Block for the public DMZ subnet 2 located in Availability Zone 2
    Type: String
  QSS3BucketName:
    AllowedPattern: '^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$'
    ConstraintDescription: >-
      Quick Start bucket name can include numbers, lowercase letters, uppercase
      letters, and hyphens (-). It cannot start or end with a hyphen (-).
    Default: aws-quickstart
    Description: >-
      S3 bucket name for the Quick Start assets. Quick Start bucket name can
      include numbers, lowercase letters, uppercase letters, and hyphens (-). It
      cannot start or end with a hyphen (-).
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: '^[0-9a-zA-Z-/]*$'
    ConstraintDescription: >-
      Quick Start key prefix can include numbers, lowercase letters, uppercase
      letters, hyphens (-), and forward slash (/).
    Default: quickstart-r3-corda/
    Description: >-
      S3 key prefix for the Quick Start assets. Quick Start key prefix can
      include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String
  RemoteAccessCIDR:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: Allowed CIDR block for external SSH access
    Type: String
  CordaAccessCIDR:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: Allowed CIDR block for Corda access
    Type: String
  VPCID:
    Description: 'ID of the VPC (e.g., vpc-0343606e)'
    Type: 'AWS::EC2::VPC::Id'
  VPCCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: Must be a valid IP range in x.x.x.x/x notation
    Description: The CIDR IP range of VPC
    Type: String
Mappings:
  AWSAMIRegionMap:
    AMI:
      US1604HVM: ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20180405
    ap-northeast-1:
      US1604HVM: ami-60a4b21c
    ap-northeast-2:
      US1604HVM: ami-633d920d
    ap-south-1:
      US1604HVM: ami-dba580b4
    ap-southeast-1:
      US1604HVM: ami-82c9ecfe
    ap-southeast-2:
      US1604HVM: ami-2b12dc49
    ca-central-1:
      US1604HVM: ami-9d7afcf9
    eu-central-1:
      US1604HVM: ami-cd491726
    eu-west-1:
      US1604HVM: ami-74e6b80d
    eu-west-2:
      US1604HVM: ami-506e8f37
    sa-east-1:
      US1604HVM: ami-5782d43b
    us-east-1:
      US1604HVM: ami-6dfe5010
    us-east-2:
      US1604HVM: ami-e82a1a8d
    us-west-1:
      US1604HVM: ami-493f2f29
    us-west-2:
      US1604HVM: ami-ca89eeb2
Rules:
  SubnetsInVPC:
    Assertions:
      - Assert:
          'Fn::EachMemberIn':
            - 'Fn::ValueOfAll':
                - 'AWS::EC2::Subnet::Id'
                - VpcId
            - 'Fn::RefAll': 'AWS::EC2::VPC::Id'
        AssertDescription: All subnets must exist in the VPC
Conditions:
  GovCloudCondition: !Equals
    - !Ref AWS::Region
    - us-gov-west-1
Resources:
  FileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      PerformanceMode: generalPurpose
      FileSystemTags:
      - Key: Name
        Value: 'CordaEFS'
  MountTargetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPCID
      GroupDescription: Security group for mount target
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '2049'
        ToPort: '2049'
        CidrIp: !Ref VPCCIDR
  MountTargetS1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystem
      SubnetId: !Ref 'PrivateSubnet1ID'
      SecurityGroups:
      - Ref: MountTargetSecurityGroup
  MountTargetS2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystem
      SubnetId: !Ref 'PrivateSubnet2ID'
      SecurityGroups:
      - Ref: MountTargetSecurityGroup
  CordaLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: Corda-Logs
      RetentionInDays: 7
  Cordainstancerole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogStreams'
                Resource:
                  - 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 'cloudwatch:PutMetricData'
                  - 'cloudwatch:GetMetricStatistics'
                  - 'cloudwatch:ListMetrics'
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - 'ec2:DescribeInstances'
                Resource: '*'
  Cordainstanceprofile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref Cordainstancerole
  CordaSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enables SSH Access
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref RemoteAccessCIDR
        - IpProtocol: tcp
          FromPort: '10002'
          ToPort: '10002'
          CidrIp: !Ref CordaAccessCIDR
        - IpProtocol: tcp
          FromPort: '10003'
          ToPort: '10003'
          CidrIp: !Ref CordaAccessCIDR
        - IpProtocol: icmp
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: !Ref RemoteAccessCIDR
  EIP:
    Type: "AWS::EC2::EIP"
    Properties:
      InstanceId: !Ref CordaInstance
  CordaInstance:
    Type: 'AWS::EC2::Instance'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          corda_install:
            - mount_sharedfs
            - corda_jar
            - run_install
            - systemd_config-corda
            - systemd_config-corda-webserver
            - run_service-corda
            - run_service-corda-webserver
            - run_corda-log-collection
        mount_sharedfs:
          packages:
            apt:
              nfs-common: []
          commands:
            01_createdir:
              command: !Sub "mkdir -p /opt/corda/sharedfs"
            02_mountfs:
              command: !Sub "mount -t nfs4 -o nfsvers=4.1 ${FileSystem}.efs.${AWS::Region}.amazonaws.com:/ /opt/corda/sharedfs"
            03_create_artemis_on_sharedfs:
              command: !Sub "mkdir -p /opt/corda/sharedfs/artemis"
            04_create_drivers_on_sharedfs:
              command: !Sub "mkdir -p /opt/corda/sharedfs/drivers"
            05_link__artemis_on_sharedfs:
              command: !Sub "ln -s /opt/corda/sharedfs/artemis /opt/corda/artemis"
            06_link_drivers_on_sharedfs:
              command: !Sub "ln -s /opt/corda/sharedfs/drivers /opt/corda/drivers"

        systemd_config-corda:
          files:
            /etc/systemd/system/corda.service:
              source: !Sub
                - >-
                  https://s3.amazonaws.com/${QSS3BucketName}/${QSS3KeyPrefix}scripts/corda.service
                - QSS3BucketName: !Ref QSS3BucketName
                  QSS3KeyPrefix: !Ref QSS3KeyPrefix
              mode: '000664'
              owner: root
              group: root
        systemd_config-corda-webserver:
          files:
            /etc/systemd/system/corda-webserver.service:
              source: !Sub
                - >-
                  https://s3.amazonaws.com/${QSS3BucketName}/${QSS3KeyPrefix}scripts/corda-webserver.service
                - QSS3BucketName: !Ref QSS3BucketName
                  QSS3KeyPrefix: !Ref QSS3KeyPrefix
              mode: '000664'
              owner: root
              group: root
        corda_jar:
          packages:
            apt:
              openjdk-8-jdk: []
              wget: []
          files:
            /home/ubuntu/install_corda.sh:
              source: !Sub
                - >-
                  https://s3.amazonaws.com/${QSS3BucketName}/${QSS3KeyPrefix}scripts/install_corda.sh
                - QSS3BucketName: !Ref QSS3BucketName
                  QSS3KeyPrefix: !Ref QSS3KeyPrefix
              mode: '000755'
              owner: root
              group: root
        run_install:
          commands:
            start_install:
              command: !Sub
              - >-
                bash /home/ubuntu/install_corda.sh \
                  "$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)" \
                  "${CountryCode}" \
                  "${Location}" \
                  "${RDSEndPoint}" \
                  "${DBMasterUsername}" \
                  "${DBMasterUserPassword}" \
                  "${OneTimeKey}"
              - CountryCode: !Ref CountryCode
                Location: !Ref Location
                RDSEndPoint: !Ref RDSEndPoint
                DBName: !Ref DBName
                DBMasterUsername: !Ref DBMasterUsername
                DBMasterUserPassword: !Ref DBMasterUserPassword
                OneTimeKey: !Ref OneTimeKey
        run_service-corda:
          commands:
            start_corda :
              command: systemctl start corda.service
        run_service-corda-webserver:
          commands:
            start_corda-weberver :
              command: systemctl start corda-webserver.service
        run_corda-log-collection:
          files:
            /home/ubuntu/corda-node-logs.sh:
              source: !Sub
                - >-
                  https://s3.amazonaws.com/${QSS3BucketName}/${QSS3KeyPrefix}scripts/corda-node-logs.sh
                - QSS3BucketName: !Ref QSS3BucketName
                  QSS3KeyPrefix: !Ref QSS3KeyPrefix
              mode: '000755'
              owner: root
              group: root
          commands:
            setup-cw-logs :
              command: bash /home/ubuntu/corda-node-logs.sh
    Properties:
      KeyName: !Ref KeyPairName
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref 'AWS::Region'
        - US1604HVM
      InstanceType: !Ref InstanceType
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '100'
      SecurityGroupIds:
        - !Ref CordaSecurityGroup
      SubnetId: !Ref PublicSubnet1ID
      IamInstanceProfile: !Ref Cordainstanceprofile
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - 'CordaNode'
      UserData: !Base64
        Fn::Sub:
          - |
            #!/bin/bash -x
            #CFN Functions
            function cfn_fail
            {
              cfn-signal -e 1 --stack ${AWS::StackName} --region ${AWS::Region} --resource CordaInstance
              exit 1
            }
            function cfn_success
            {
              cfn-signal -e 0 --stack ${AWS::StackName} --region ${AWS::Region} --resource CordaInstance
              exit 0
            }
            S3URI=https://${QSS3BucketName}.${S3Region}.amazonaws.com/${QSS3KeyPrefix}
            echo \'[Cloning: Load QuickStart Common Utils]\'
            #Once Repo is public (Use quickstart-linux-utilities submodue)
            until git clone https://github.com/aws-quickstart/quickstart-linux-utilities.git ; do echo "Retrying"; done
            cd /quickstart-linux-utilities
            source quickstart-cfn-tools.source
            echo \'[Loaded: Load QuickStart Common Utils]\'
            echo \'[Update Operating System]\'
            qs_update-os || qs_err
            qs_bootstrap_pip || qs_err
            qs_aws-cfn-bootstrap || qs_err
            # Set Log Group Name (TODO: create qs_cloudwatch_loggroup_set)
            sed -i "s/__LOGGROUP__/${CordaLogGroup}/g" cloudwatch_logs.stub
            qs_cloudwatch_install || qs_err
            # CFN Debug Logs
            qs_cloudwatch_tracklog /var/lib/cloud/instance/scripts/part-001
            qs_cloudwatch_tracklog /var/log/cloud-init.log
            qs_cloudwatch_tracklog /var/log/cloud-init-output.log
            cfn-init -v --stack ${AWS::StackName} --resource CordaInstance --configsets corda_install --region ${AWS::Region} || cfn_fail
            # Signal cfn-init (final check)
            [ $(qs_status) == 0 ] && cfn_success || cfn_fail
          - S3Region: !If [ GovCloudCondition, s3-us-gov-west-1, s3 ]
  CordaColdInstance:
    Type: 'AWS::EC2::Instance'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          corda_install:
            - mount_sharedfs
            - corda_jar
            - run_install
            - systemd_config-corda
            - systemd_config-corda-webserver
            - run_service-corda
            - run_service-corda-webserver
            - run_corda-log-collection
        mount_sharedfs:
          packages:
            apt:
              nfs-common: []
          commands:
            01_createdir:
              command: !Sub "mkdir -p /opt/corda/sharedfs"
            02_mountfs:
              command: !Sub "mount -t nfs4 -o nfsvers=4.1 ${FileSystem}.efs.${AWS::Region}.amazonaws.com:/ /opt/corda/sharedfs"
            03_create_artemis_on_sharedfs:
              command: !Sub "mkdir -p /opt/corda/sharedfs/artemis"
            04_create_drivers_on_sharedfs:
              command: !Sub "mkdir -p /opt/corda/sharedfs/drivers"
            05_link__artemis_on_sharedfs:
              command: !Sub "ln -s /opt/corda/sharedfs/artemis /opt/corda/artemis"
            06_link_drivers_on_sharedfs:
              command: !Sub "ln -s /opt/corda/sharedfs/drivers /opt/corda/drivers"

        systemd_config-corda:
          files:
            /etc/systemd/system/corda.service:
              source: !Sub
                - >-
                  https://s3.amazonaws.com/${QSS3BucketName}/${QSS3KeyPrefix}scripts/corda.service
                - QSS3BucketName: !Ref QSS3BucketName
                  QSS3KeyPrefix: !Ref QSS3KeyPrefix
              mode: '000664'
              owner: root
              group: root
        systemd_config-corda-webserver:
          files:
            /etc/systemd/system/corda-webserver.service:
              source: !Sub
                - >-
                  https://s3.amazonaws.com/${QSS3BucketName}/${QSS3KeyPrefix}scripts/corda-webserver.service
                - QSS3BucketName: !Ref QSS3BucketName
                  QSS3KeyPrefix: !Ref QSS3KeyPrefix
              mode: '000664'
              owner: root
              group: root
        corda_jar:
          packages:
            apt:
              openjdk-8-jdk: []
              wget: []
          files:
            /home/ubuntu/install_corda.sh:
              source: !Sub
                - >-
                  https://s3.amazonaws.com/${QSS3BucketName}/${QSS3KeyPrefix}scripts/install_corda.sh
                - QSS3BucketName: !Ref QSS3BucketName
                  QSS3KeyPrefix: !Ref QSS3KeyPrefix
              mode: '000755'
              owner: root
              group: root
        run_install:
          commands:
            start_install:
              command: !Sub
              - >-
                bash /home/ubuntu/install_corda.sh \
                  "$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)" \
                  "${CountryCode}" \
                  "${Location}" \
                  "${RDSEndPoint}" \
                  "${DBMasterUsername}" \
                  "${DBMasterUserPassword}" \
                  "${OneTimeKey}"
              - CountryCode: !Ref CountryCode
                Location: !Ref Location
                RDSEndPoint: !Ref RDSEndPoint
                DBName: !Ref DBName
                DBMasterUsername: !Ref DBMasterUsername
                DBMasterUserPassword: !Ref DBMasterUserPassword
                OneTimeKey: !Ref OneTimeKey
        run_service-corda:
          commands:
            start_corda :
              command: systemctl start corda.service
        run_service-corda-webserver:
          commands:
            start_corda-weberver :
              command: systemctl start corda-webserver.service
        run_corda-log-collection:
          files:
            /home/ubuntu/corda-node-logs.sh:
              source: !Sub
                - >-
                  https://s3.amazonaws.com/${QSS3BucketName}/${QSS3KeyPrefix}scripts/corda-node-logs.sh
                - QSS3BucketName: !Ref QSS3BucketName
                  QSS3KeyPrefix: !Ref QSS3KeyPrefix
              mode: '000755'
              owner: root
              group: root
          commands:
            setup-cw-logs :
              command: bash /home/ubuntu/corda-node-logs.sh
    Properties:
      KeyName: !Ref KeyPairName
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref 'AWS::Region'
        - US1604HVM
      InstanceType: !Ref InstanceType
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '100'
      SecurityGroupIds:
        - !Ref CordaSecurityGroup
      SubnetId: !Ref PublicSubnet1ID
      IamInstanceProfile: !Ref Cordainstanceprofile
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - 'CordaNode'
      UserData: !Base64
        Fn::Sub:
          - |
            #!/bin/bash -x
            #CFN Functions
            function cfn_fail
            {
              cfn-signal -e 1 --stack ${AWS::StackName} --region ${AWS::Region} --resource CordaColdInstance
              exit 1
            }
            function cfn_success
            {
              cfn-signal -e 0 --stack ${AWS::StackName} --region ${AWS::Region} --resource CordaColdInstance
              exit 0
            }
            S3URI=https://${QSS3BucketName}.${S3Region}.amazonaws.com/${QSS3KeyPrefix}
            echo \'[Cloning: Load QuickStart Common Utils]\'
            #Once Repo is public (Use quickstart-linux-utilities submodue)
            until git clone https://github.com/aws-quickstart/quickstart-linux-utilities.git ; do echo "Retrying"; done
            cd /quickstart-linux-utilities
            source quickstart-cfn-tools.source
            echo \'[Loaded: Load QuickStart Common Utils]\'
            echo \'[Update Operating System]\'
            qs_update-os || qs_err
            qs_bootstrap_pip || qs_err
            qs_aws-cfn-bootstrap || qs_err
            # Set Log Group Name (TODO: create qs_cloudwatch_loggroup_set)
            sed -i "s/__LOGGROUP__/${CordaLogGroup}/g" cloudwatch_logs.stub
            qs_cloudwatch_install || qs_err
            # CFN Debug Logs
            qs_cloudwatch_tracklog /var/lib/cloud/instance/scripts/part-001
            qs_cloudwatch_tracklog /var/log/cloud-init.log
            qs_cloudwatch_tracklog /var/log/cloud-init-output.log
            cfn-init -v --stack ${AWS::StackName} --resource CordaColdInstance --configsets corda_install --region ${AWS::Region} || cfn_fail
            # Signal cfn-init (final check)
            [ $(qs_status) == 0 ] && cfn_success || cfn_fail
          - S3Region: !If [ GovCloudCondition, s3-us-gov-west-1, s3 ]
Outputs:
  CordaInstancePublicDnsName:
    Value: !GetAtt
      - CordaInstance
      - PublicDnsName
    Description: Public DNS Name for the Corda Instance
  CordaInstancePublicIPAddress:
    Value: !Sub 'ubuntu@${CordaInstance.PublicIp}'
    Description: Public IP address for the Corda instance
  CordaColdInstancePublicDnsName:
    Value: !GetAtt
      - CordaColdInstance
      - PublicDnsName
    Description: Public DNS Name for the Corda Instance
  CordaColdInstancePublicIPAddress:
    Value: !Sub 'ubuntu@${CordaColdInstance.PublicIp}'
    Description: Public IP address for the cold Corda instance
